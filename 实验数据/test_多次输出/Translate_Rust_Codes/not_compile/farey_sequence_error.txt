编译错误: error[E0382]: use of moved value: `f2`
  --> C:\Users\muzhi\Desktop\C_Rust_BETA\temp_main.rs:15:43
   |
6  |     let (mut f1, mut f2) = (Frac { d: 0, n: 1 }, Frac { d: 1, n });
   |                  ------ move occurs because `f2` has type `Frac`, which does not implement the `Copy` trait
...
11 |     while f2.n > 1 {
   |     -------------- inside of this loop
...
14 |         f1 = f2;
   |              -- value moved here
15 |         f2 = Frac { d: f2.d * k - t.d, n: f2.n * k - t.n };
   |                                           ^^^^ value used here after move
   |
note: if `Frac` implemented `Clone`, you could clone the value
  --> C:\Users\muzhi\Desktop\C_Rust_BETA\temp_main.rs:5:5
   |
5  |     struct Frac { d: i32, n: i32 }
   |     ^^^^^^^^^^^ consider implementing `Clone` for this type
...
14 |         f1 = f2;
   |              -- you could clone this value

error[E0596]: cannot borrow `len` as mutable, as it is not declared as mutable
  --> C:\Users\muzhi\Desktop\C_Rust_BETA\temp_main.rs:36:22
   |
36 |         mem::replace(&mut len, len - sub_total);
   |                      ^^^^^^^^ cannot borrow as mutable
   |
help: consider changing this to be mutable
   |
27 |     let mut len = (n as u64) * (n as u64 + 3) / 2;
   |         +++

error[E0503]: cannot use `len` because it was mutably borrowed
  --> C:\Users\muzhi\Desktop\C_Rust_BETA\temp_main.rs:36:32
   |
36 |         mem::replace(&mut len, len - sub_total);
   |         ------------ --------  ^^^ use of borrowed `len`
   |         |            |
   |         |            `len` is borrowed here
   |         borrow later used by call

error: aborting due to 3 previous errors

Some errors have detailed explanations: E0382, E0503, E0596.
For more information about an error, try `rustc --explain E0382`.
