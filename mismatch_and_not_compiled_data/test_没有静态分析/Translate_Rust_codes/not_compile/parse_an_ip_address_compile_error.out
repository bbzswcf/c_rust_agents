Rust 编译失败:
warning: variable does not need to be mutable
   --> D:\code\C_Rust_BETA\temp_main.rs:127:17
    |
127 |             let mut psz_text_before = *ppsz_text;
    |                 ----^^^^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> D:\code\C_Rust_BETA\temp_main.rs:212:17
    |
212 |             let mut psz_text_before = *ppsz_text;
    |                 ----^^^^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

error[E0384]: cannot assign twice to immutable variable `pby_addr_cursor`
   --> D:\code\C_Rust_BETA\temp_main.rs:176:17
    |
117 |         let pby_addr_cursor = aby_addr_local.unwrap().as_mut_ptr(); // Removed mut keyword
    |             --------------- first assignment to `pby_addr_cursor`
...
176 |                 pby_addr_cursor = unsafe { pby_addr_cursor.offset(2) };
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable
    |
help: consider making this binding mutable
    |
117 |         let mut pby_addr_cursor = aby_addr_local.unwrap().as_mut_ptr(); // Removed mut keyword
    |             +++

error[E0382]: use of moved value: `aby_addr_local`
   --> D:\code\C_Rust_BETA\temp_main.rs:187:52
    |
36  |     let mut aby_addr_local: Option<&mut [u8; 16]> = Some(aby_addr);
    |         ------------------ move occurs because `aby_addr_local` has type `Option<&mut [u8; 16]>`, which does not implement the `Copy` trait
...
117 |         let pby_addr_cursor = aby_addr_local.unwrap().as_mut_ptr(); // Removed mut keyword
    |                               -------------- -------- `aby_addr_local` moved due to this method call
    |                               |
    |                               help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
...
187 |             let n_head = (pby_zeros_loc as usize - aby_addr_local.unwrap().as_ptr() as usize) / std::mem::size_of::<u8>();
    |                                                    ^^^^^^^^^^^^^^ value used here after move
    |
note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `aby_addr_local`
   --> /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c\library\core\src\option.rs:967:25
help: you could `clone` the value and consume it, if the `&mut [u8; 16]: Clone` trait bound could be satisfied
    |
117 |         let pby_addr_cursor = aby_addr_local.clone().unwrap().as_mut_ptr(); // Removed mut keyword
    |                                             ++++++++

error[E0382]: use of moved value: `aby_addr_local`
   --> D:\code\C_Rust_BETA\temp_main.rs:191:28
    |
36  |     let mut aby_addr_local: Option<&mut [u8; 16]> = Some(aby_addr);
    |         ------------------ move occurs because `aby_addr_local` has type `Option<&mut [u8; 16]>`, which does not implement the `Copy` trait
...
187 |             let n_head = (pby_zeros_loc as usize - aby_addr_local.unwrap().as_ptr() as usize) / std::mem::size_of::<u8>();
    |                                                    -------------- -------- `aby_addr_local` moved due to this method call
    |                                                    |
    |                                                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
...
191 |                 ptr::copy(&aby_addr_local.unwrap()[16 - n_tail], &mut aby_addr_local.unwrap()[16 - n_tail], n_tail);
    |                            ^^^^^^^^^^^^^^ value used here after move
    |
help: you could `clone` the value and consume it, if the `&mut [u8; 16]: Clone` trait bound could be satisfied
    |
187 |             let n_head = (pby_zeros_loc as usize - aby_addr_local.clone().unwrap().as_ptr() as usize) / std::mem::size_of::<u8>();
    |                                                                  ++++++++

error[E0382]: use of moved value: `aby_addr_local`
   --> D:\code\C_Rust_BETA\temp_main.rs:191:71
    |
36  |     let mut aby_addr_local: Option<&mut [u8; 16]> = Some(aby_addr);
    |         ------------------ move occurs because `aby_addr_local` has type `Option<&mut [u8; 16]>`, which does not implement the `Copy` trait
...
191 |                 ptr::copy(&aby_addr_local.unwrap()[16 - n_tail], &mut aby_addr_local.unwrap()[16 - n_tail], n_tail);
    |                            -------------- --------                    ^^^^^^^^^^^^^^ value used here after move
    |                            |              |
    |                            |              `aby_addr_local` moved due to this method call
    |                            help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
    |
help: you could `clone` the value and consume it, if the `&mut [u8; 16]: Clone` trait bound could be satisfied
    |
191 |                 ptr::copy(&aby_addr_local.clone().unwrap()[16 - n_tail], &mut aby_addr_local.unwrap()[16 - n_tail], n_tail);
    |                                          ++++++++

error[E0382]: use of moved value: `aby_addr_local`
   --> D:\code\C_Rust_BETA\temp_main.rs:198:24
    |
36  |     let mut aby_addr_local: Option<&mut [u8; 16]> = Some(aby_addr);
    |         ------------------ move occurs because `aby_addr_local` has type `Option<&mut [u8; 16]>`, which does not implement the `Copy` trait
...
117 |         let pby_addr_cursor = aby_addr_local.unwrap().as_mut_ptr(); // Removed mut keyword
    |                               -------------- -------- `aby_addr_local` moved due to this method call
    |                               |
    |                               help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
...
191 |                 ptr::copy(&aby_addr_local.unwrap()[16 - n_tail], &mut aby_addr_local.unwrap()[16 - n_tail], n_tail);
    |                                                                       -------------- -------- `aby_addr_local` moved due to this method call
    |                                                                       |
    |                                                                       help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
...
198 |             if ptr::eq(aby_addr_local.unwrap(), &ABY_PFX) { // Removed unsafe block
    |                        ^^^^^^^^^^^^^^ value used here after move
    |
help: you could `clone` the value and consume it, if the `&mut [u8; 16]: Clone` trait bound could be satisfied
    |
117 |         let pby_addr_cursor = aby_addr_local.clone().unwrap().as_mut_ptr(); // Removed mut keyword
    |                                             ++++++++
help: you could `clone` the value and consume it, if the `&mut [u8; 16]: Clone` trait bound could be satisfied
    |
191 |                 ptr::copy(&aby_addr_local.unwrap()[16 - n_tail], &mut aby_addr_local.clone().unwrap()[16 - n_tail], n_tail);
    |                                                                                     ++++++++

error: aborting due to 5 previous errors; 2 warnings emitted

Some errors have detailed explanations: E0382, E0384.
For more information about an error, try `rustc --explain E0382`.
