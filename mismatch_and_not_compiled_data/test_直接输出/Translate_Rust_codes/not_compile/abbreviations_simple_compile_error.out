Rust 编译失败:
error[E0106]: missing lifetime specifier
   --> D:\code\rscode\C_Rust_BETA\temp_main.rs:106:72
    |
106 | fn find_command(commands: &Option<Box<Command>>, word: &str) -> Option<&Command> {
    |                           ---------------------        ----            ^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `commands` or `word`
help: consider introducing a named lifetime parameter
    |
106 | fn find_command<'a>(commands: &'a Option<Box<Command>>, word: &'a str) -> Option<&'a Command> {
    |                ++++            ++                              ++                 ++

warning: unused import: `std::ptr::copy`
 --> D:\code\rscode\C_Rust_BETA\temp_main.rs:2:5
  |
2 | use std::ptr::copy;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> D:\code\rscode\C_Rust_BETA\temp_main.rs:24:105
    |
24  |     olen >= command.min_len && olen <= command.length && str.chars().take(olen).collect::<String>().cmp(&command.cmd[..olen]).is_eq()
    |                                                                                                     --- ^^^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |                                                                                                     |
    |                                                                                                     arguments to this method are incorrect
    |
    = note: expected reference `&String`
               found reference `&str`
note: method defined here
   --> C:\Users\wang\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\core\src\cmp.rs:840:8
    |
840 |     fn cmp(&self, other: &Self) -> Ordering;
    |        ^^^

error[E0382]: borrow of moved value: `words`
  --> D:\code\rscode\C_Rust_BETA\temp_main.rs:67:37
   |
48 |     let mut words = xmalloc(16);
   |         --------- move occurs because `words` has type `Vec<String>`, which does not implement the `Copy` trait
...
51 |     while begin < len {
   |     ----------------- inside of this loop
...
67 |             words = xrealloc(words, words.capacity() * 2);
   |                              -----  ^^^^^ value borrowed here after move
   |                              |
   |                              value moved here
   |
note: consider changing this parameter type in function `xrealloc` to borrow instead if owning the value isn't necessary
  --> D:\code\rscode\C_Rust_BETA\temp_main.rs:42:25
   |
42 | fn xrealloc<T>(mut vec: Vec<T>, n: usize) -> Vec<T> {
   |    --------             ^^^^^^ this parameter takes ownership of the value
   |    |
   |    in this function
help: consider moving the expression out of the loop so it is only moved once
   |
51 ~     let mut value = xrealloc(words, words.capacity() * 2);
52 ~     while begin < len {
53 |         let mut i = begin;
 ...
67 |         if words.capacity() == words.len() {
68 ~             words = value;
   |
help: consider cloning the value if the performance cost is acceptable
   |
67 |             words = xrealloc(words.clone(), words.capacity() * 2);
   |                                   ++++++++

error: aborting due to 3 previous errors; 1 warning emitted

Some errors have detailed explanations: E0106, E0308, E0382.
For more information about an error, try `rustc --explain E0106`.
